import pandas as pd
import numpy as np

from sklearn.metrics import r2_score

from plotly.subplots import make_subplots
import plotly.graph_objects as go
import plotly.express as px
import plotly.io as pio
import colorcet as cc

import time
import pickle

# data_folder = 'data/{}/'
version_folder = "../data/stability_input/{}/version_{}/"
fit_folder = "../stability_results/model_fit/{}/version_{}/target_{}/"
data_folder = "../data/{}/"

areas = ["CE", "Nordic", "GB"]
area_names = ["Continental Europe", "Nordic", "Great Britain"]
area_name = dict(zip(areas, area_names))

targets = ["f_rocof", "f_ext", "f_msd", "f_integral"]
target_names = ["RoCoF", "Nadir", "MSD", "Integral"]
target_name = dict(zip(targets, target_names))

version = "2022-06-24"

input_cols = [
    "gen_other",
    "gen_solar",
    "gen_wind_on",
    "gen_waste",
    "gen_nuclear",
    "gen_biomass",
    "gen_gas",
    "gen_run_off_hydro",
    "gen_oil",
    "gen_pumped_hydro",
    "gen_other_renew",
    "gen_reservoir_hydro",
    "gen_hard_coal",
    "gen_wind_off",
    "gen_geothermal",
    "gen_lignite",
    "load",
    "gen_coal_gas",
    "total_gen",
    "synchronous_gen",
    "load_ramp",
    "total_gen_ramp",
    "other_ramp",
    "solar_ramp",
    "wind_on_ramp",
    "waste_ramp",
    "nuclear_ramp",
    "biomass_ramp",
    "gas_ramp",
    "run_off_hydro_ramp",
    "oil_ramp",
    "pumped_hydro_ramp",
    "other_renew_ramp",
    "reservoir_hydro_ramp",
    "hard_coal_ramp",
    "wind_off_ramp",
    "geothermal_ramp",
    "lignite_ramp",
    "coal_gas_ramp",
    "forecast_error_wind_on",
    "forecast_error_wind_off",
    "forecast_error_solar",
    "forecast_error_total_gen",
    "forecast_error_load",
    "forecast_error_load_ramp",
    "forecast_error_total_gen_ramp",
    "forecast_error_wind_off_ramp",
    "forecast_error_wind_on_ramp",
    "forecast_error_solar_ramp",
    "solar_day_ahead",
    "wind_on_day_ahead",
    "scheduled_gen_total",
    "prices_day_ahead",
    "load_day_ahead",
    "wind_off_day_ahead",
    "month",
    "weekday",
    "hour",
    "load_ramp_day_ahead",
    "total_gen_ramp_day_ahead",
    "wind_off_ramp_day_ahead",
    "wind_on_ramp_day_ahead",
    "solar_ramp_day_ahead",
    "price_ramp_day_ahead",
    "gen_fossil_peat",
    "fossil_peat_ramp",
    "residual",
    "connected_installed_sync_power",
    "CE_unscheduled_flow",
    "Nordic_unscheduled_flow",
    "GB_unscheduled_flow",
    "SACO_unscheduled_flow",
    "Baltic_unscheduled_flow",
    "IPS_UPS_unscheduled_flow",
    "IE_unscheduled_flow",
    "CE_unscheduled_flow_ramp",
    "Nordic_unscheduled_flow_ramp",
    "GB_unscheduled_flow_ramp",
    "SACO_unscheduled_flow_ramp",
    "Baltic_unscheduled_flow_ramp",
    "IPS_UPS_unscheduled_flow_ramp",
    "IE_unscheduled_flow_ramp",
    "CE_import_export_total",
    "Nordic_import_export_total",
    "GB_import_export_total",
    "SACO_import_export_total",
    "Baltic_import_export_total",
    "IPS_UPS_import_export_total",
    "IE_import_export_total",
    "CE_import_export_total_ramp",
    "Nordic_import_export_total_ramp",
    "GB_import_export_total_ramp",
    "SACO_import_export_total_ramp",
    "Baltic_import_export_total_ramp",
    "IPS_UPS_import_export_total_ramp",
    "IE_import_export_total_ramp",
    "CE_cross_border_flow",
    "Nordic_cross_border_flow",
    "GB_cross_border_flow",
    "SACO_cross_border_flow",
    "Baltic_cross_border_flow",
    "IPS_UPS_cross_border_flow",
    "IE_cross_border_flow",
    "CE_cross_border_flow_ramp",
    "Nordic_cross_border_flow_ramp",
    "GB_cross_border_flow_ramp",
    "SACO_cross_border_flow_ramp",
    "Baltic_cross_border_flow_ramp",
    "IPS_UPS_cross_border_flow_ramp",
    "IE_cross_border_flow_ramp",
    "inertia",
]

input_col_names = [
    "Generation other",
    "Solar generation",
    "Onshore wind generation",
    "Waste generation",
    "Nuclear generation",
    "Biomass generation",
    "Gas generation",
    "Run-off-river hydro generation",
    "Oil generation",
    "Pumped hydro generation",
    "Other renewable generation",
    "Reservoir hydro generation",
    "Hard coal generation",
    "Wind offshore generation",
    "Geothermal generation",
    "Lignite generation",
    "Load",
    "Coal gas generation",
    "Total generation",
    "Synchronous generation",
    "Load ramp",
    "Total generation ramp",
    "Other ramp",
    "Solar ramp",
    "Onshore wind ramp",
    "Waste ramp",
    "Nuclear ramp",
    "Biomass ramp",
    "Gas ramp",
    "Run-off-river hydro ramp",
    "Oil ramp",
    "Pumped hydro ramp",
    "Other renewable ramp",
    "Reservoir hydro ramp",
    "Hard coal ramp",
    "Offshore wind ramp",
    "geothermal_ramp",
    "Lignite ramp",
    "Coal gas ramp",
    "Forecast error onshore wind",
    "Forecast error offshore wind",
    "Forecast error solar",
    "Forecast error total generation",
    "Forecast error load",
    "Forecast error load ramp",
    "Forecast error generation ramp",
    "Forecast error offshore wind ramp",
    "Forecast error onshore wind ramp",
    "Forecast error solar ramp",
    "Solar day-ahead",
    "Onshore wind day-ahead",
    "Scheduled generation",
    "Prices day-ahead",
    "Load day-ahead",
    "Offshore wind day-ahead",
    "Month",
    "Weekday",
    "Hour",
    "Load ramp day-ahead",
    "Generation ramp day-ahead",
    "Offshore wind ramp day-ahead",
    "Onshore wind ramp day-ahead",
    "Solar ramp day-ahead",
    "Price ramp day-ahead",
    "Fossil peat generation",
    "Fossil peat ramp",
    "Residual",
    "Connected installed synchronous power",
    "CE unscheduled outflow",
    "Nordic unscheduled outflow",
    "GB unscheduled outflow",
    "SACO unscheduled outflow",
    "Baltic unscheduled outflow",
    "Baltic unscheduled outflow",
    "IE unscheduled outflow",
    "CE unscheduled outflow ramp",
    "Nordic unscheduled outflow ramp",
    "GB unscheduled outflow ramp",
    "SACO unscheduled outflow ramp",
    "Baltic unscheduled outflow ramp",
    "Baltic unscheduled outflow ramp",
    "IE unscheduled outflow ramp",
    "CE Scheduled inflow",
    "Nordic Scheduled inflow",
    "GB Scheduled inflow",
    "SACO Scheduled inflow",
    "Baltic Scheduled inflow",
    "Baltic Scheduled inflow",
    "IE Scheduled inflow",
    "CE Scheduled inflow ramp",
    "Nordic Scheduled inflow ramp",
    "GB Scheduled inflow ramp",
    "SACO Scheduled inflow ramp",
    "Baltic Scheduled inflow ramp",
    "Baltic Scheduled inflow ramp",
    "IE Scheduled inflow ramp",
    "CE Physical inflow",
    "Nordic Physical inflow",
    "GB Physical inflow",
    "SACO Physical inflow",
    "Baltic Physical inflow",
    "Baltic Physical inflow",
    "IE Physical inflow",
    "CE Physical inflow ramp",
    "Nordic Physical inflow ramp",
    "GB Physical inflow ramp",
    "SACO Physical inflow ramp",
    "Baltic Physical inflow ramp",
    "Baltic Physical inflow ramp",
    "IE Physical inflow ramp",
    "Inertia Proxy",
]

input_col_names = dict(zip(input_cols, input_col_names))


def shap_vals_df(area, version, targ, model_type="_full"):
    version_folder = "../data/stability_input/{}/version_{}/"
    fit_folder = "../stability_results/model_fit/{}/version_{}/target_{}/"
    with open(
        fit_folder.format(area, version, targ)
        + "shap_values_gtb{}.pkl".format(model_type),
        "rb",
    ) as handle:
        sh = pickle.load(handle)
    X_test = pd.read_hdf(
        version_folder.format(area, version) + "X_test{}.h5".format(model_type)
    )
    return pd.DataFrame(data=sh.values, index=X_test.index, columns=sh.feature_names)
